{"paragraphs":[{"title":"What is Apache Mahout (these days)","text":"%md\n\n## The Apache Mahout™ project's goal is to build an environment for quickly creating scalable performant machine learning applications.\n\n### Apache Mahout software provides three major features:\n\n- ### A simple and extensible programming environment and framework for building scalable algorithms\n- ### A wide variety of premade algorithms for Scala + Apache Spark, H2O, Apache Flink\n- ### Samsara, a vector math experimentation environment with R-like syntax which works at scale\n\n# In other words:\n\n## Apache Mahout provides a unified API for quickly creating machine learning algorithms on a variety of engines.\n","dateUpdated":"2016-09-11T23:45:46+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{},"map":{"baseMapType":"Streets","isOnline":true,"pinCols":[]}},"enabled":true,"editorMode":"ace/mode/markdown","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1473464443872_-1530649569","id":"20160909-234043_-885424920","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>What is Apache Mahout (these days)</h1>\n<h2>The Apache Mahout™ project's goal is to build an environment for quickly creating scalable performant machine learning applications.</h2>\n<h3>Apache Mahout software provides three major features:</h3>\n<ul>\n<li><h3>A simple and extensible programming environment and framework for building scalable algorithms</h3>\n</li>\n<li><h3>A wide variety of premade algorithms for Scala + Apache Spark, H2O, Apache Flink</h3>\n</li>\n<li><h3>Samsara, a vector math experimentation environment with R-like syntax which works at scale</h3>\n</li>\n</ul>\n<h1>In other words:</h1>\n<h2>Apache Mahout provides a unified API for quickly creating machine learning algorithms on a variety of engines.</h2>\n"},"dateCreated":"2016-09-09T11:40:43+0000","dateStarted":"2016-09-11T23:45:08+0000","dateFinished":"2016-09-11T23:45:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3295"},{"title":"Mahout on Flink","text":"%mahoutFlink\n\n// Imports and creating the distributed context, similar but not exactly the same ///////////////////////////////////////////\nimport org.apache.flink.api.scala._\nimport org.apache.mahout.math.drm._\nimport org.apache.mahout.math.drm.RLikeDrmOps._\nimport org.apache.mahout.flinkbindings._\nimport org.apache.mahout.math._\nimport scalabindings._\nimport RLikeOps._\n\n\nimplicit val ctx = new FlinkDistributedContext(benv)\n\n// CODE IS EXACTLY THE SAME - UNIFIED ML API ////////////////////////////////////////////////////////////////////////////////\n\nval drmData = drmParallelize(dense(\n  (2, 2, 10.5, 10, 29.509541),  // Apple Cinnamon Cheerios\n  (1, 2, 12,   12, 18.042851),  // Cap'n'Crunch\n  (1, 1, 12,   13, 22.736446),  // Cocoa Puffs\n  (2, 1, 11,   13, 32.207582),  // Froot Loops\n  (1, 2, 12,   11, 21.871292),  // Honey Graham Ohs\n  (2, 1, 16,   8,  36.187559),  // Wheaties Honey Gold\n  (6, 2, 17,   1,  50.764999),  // Cheerios\n  (3, 2, 13,   7,  40.400208),  // Clusters\n  (3, 3, 13,   4,  45.811716)), numPartitions = 1)\n  \ndrmData.collect(::, 0 until 4)\n\nval drmX = drmData(::, 0 until 4)\nval y = drmData.collect(::, 4)\nval drmXtX = drmX.t %*% drmX\nval drmXty = drmX.t %*% y\n\n\nval XtX = drmXtX.collect\nval Xty = drmXty.collect(::, 0)\nval beta = solve(XtX, Xty)\n","dateUpdated":"2016-09-11T23:52:49+0000","config":{"colWidth":6,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{},"map":{"baseMapType":"Streets","isOnline":true,"pinCols":[]}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1473283341373_1569667737","id":"20160907-212221_-557489047","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.flink.api.scala._\nimport org.apache.mahout.math.drm._\nimport org.apache.mahout.math.drm.RLikeDrmOps._\nimport org.apache.mahout.flinkbindings._\nimport org.apache.mahout.math._\nimport scalabindings._\nimport RLikeOps._\nctx: org.apache.mahout.flinkbindings.FlinkDistributedContext = org.apache.mahout.flinkbindings.FlinkDistributedContext@f1c4eb15\nwarning: Class it.unimi.dsi.fastutil.ints.Int2DoubleOpenHashMap not found - continuing with a stub.\ndrmData: org.apache.mahout.math.drm.CheckpointedDrm[Int] = org.apache.mahout.flinkbindings.drm.CheckpointedFlinkDrm@5ab9f820\n(5,9)\nres0: org.apache.mahout.math.Matrix = \n{\n 0 =>\t{0:2.0,1:2.0,2:10.5,3:10.0}\n 1 =>\t{0:1.0,1:2.0,2:12.0,3:12.0}\n 2 =>\t{0:1.0,1:1.0,2:12.0,3:13.0}\n 3 =>\t{0:2.0,1:1.0,2:11.0,3:13.0}\n 4 =>\t{0:1.0,1:2.0,2:12.0,3:11.0}\n 5 =>\t{0:2.0,1:1.0,2:16.0,3:8.0}\n 6 =>\t{0:6.0,1:2.0,2:17.0,3:1.0}\n 7 =>\t{0:3.0,1:2.0,2:13.0,3:7.0}\n 8 =>\t{0:3.0,1:3.0,2:13.0,3:4.0}\n}\ndrmX: org.apache.mahout.math.drm.DrmLike[Int] = OpMapBlock(org.apache.mahout.flinkbindings.drm.CheckpointedFlinkDrm@5ab9f820,<function1>,4,-1,true)\n(5,9)\ny: org.apache.mahout.math.Vector = {0:29.509541,1:18.042851,2:22.736446,3:32.207582,4:21.871292,5:36.187559,6:50.764999,7:40.400208,8:45.811716}\ndrmXtX: org.apache.mahout.math.drm.DrmLike[Int] = OpABAnyKey(OpAt(OpMapBlock(org.apache.mahout.flinkbindings.drm.CheckpointedFlinkDrm@5ab9f820,<function1>,4,-1,true)),OpMapBlock(org.apache.mahout.flinkbindings.drm.CheckpointedFlinkDrm@5ab9f820,<function1>,4,-1,true))\ndrmXty: org.apache.mahout.math.drm.DrmLike[Int] = OpAx(OpAt(OpMapBlock(org.apache.mahout.flinkbindings.drm.CheckpointedFlinkDrm@5ab9f820,<function1>,4,-1,true)),{0:29.509541,1:18.042851,2:22.736446,3:32.207582,4:21.871292,5:36.187559,6:50.764999,7:40.400208,8:45.811716})\n(4,4)\nXtX: org.apache.mahout.math.Matrix = \n{\n 0 =>\t{0:69.0,1:40.0,2:291.0,3:137.0}\n 1 =>\t{0:40.0,1:32.0,2:207.0,3:128.0}\n 2 =>\t{0:291.0,1:207.0,2:1546.25,3:968.0}\n 3 =>\t{0:137.0,1:128.0,2:968.0,3:833.0}\n}\n(1,4)\nXty: org.apache.mahout.math.Vector = {0:821.685719,1:549.7445170000001,2:3978.7015895000004,3:2272.779989}\nbeta: org.apache.mahout.math.Vector = {0:5.247349465378383,1:2.7507945784675427,2:1.1527813010791756,3:0.10312017617607437}\n"},"dateCreated":"2016-09-07T09:22:21+0000","dateStarted":"2016-09-09T02:16:56+0000","dateFinished":"2016-09-09T02:17:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3296"},{"title":"Mahout on Spark","text":"%mahoutSpark\n\n// Imports and creating the distributed context, similar but not exactly the same ///////////////////////////////////////////\n\nimport org.apache.mahout.math._\nimport org.apache.mahout.math.scalabindings._\nimport org.apache.mahout.math.drm._\nimport org.apache.mahout.math.scalabindings.RLikeOps._\nimport org.apache.mahout.math.drm.RLikeDrmOps._\nimport org.apache.mahout.sparkbindings._\n\nimplicit val sdc: org.apache.mahout.sparkbindings.SparkDistributedContext = sc2sdc(sc)\n\n\n// CODE IS EXACTLY THE SAME - UNIFIED ML API ////////////////////////////////////////////////////////////////////////////////\n\nval drmData = drmParallelize(dense(\n  (2, 2, 10.5, 10, 29.509541),  // Apple Cinnamon Cheerios\n  (1, 2, 12,   12, 18.042851),  // Cap'n'Crunch\n  (1, 1, 12,   13, 22.736446),  // Cocoa Puffs\n  (2, 1, 11,   13, 32.207582),  // Froot Loops\n  (1, 2, 12,   11, 21.871292),  // Honey Graham Ohs\n  (2, 1, 16,   8,  36.187559),  // Wheaties Honey Gold\n  (6, 2, 17,   1,  50.764999),  // Cheerios\n  (3, 2, 13,   7,  40.400208),  // Clusters\n  (3, 3, 13,   4,  45.811716)), numPartitions = 1)\n  \ndrmData.collect(::, 0 until 4)\n\nval drmX = drmData(::, 0 until 4)\nval y = drmData.collect(::, 4)\nval drmXtX = drmX.t %*% drmX\nval drmXty = drmX.t %*% y\n\n\nval XtX = drmXtX.collect\nval Xty = drmXty.collect(::, 0)\nval beta = solve(XtX, Xty)","dateUpdated":"2016-09-11T23:52:50+0000","config":{"colWidth":6,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{},"map":{"baseMapType":"Streets","isOnline":true,"pinCols":[]}},"enabled":true,"tableHide":false,"title":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1473287859606_-1174159513","id":"20160907-223739_-1096483565","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.mahout.math._\n\nimport org.apache.mahout.math.scalabindings._\n\nimport org.apache.mahout.math.drm._\n\nimport org.apache.mahout.math.scalabindings.RLikeOps._\n\nimport org.apache.mahout.math.drm.RLikeDrmOps._\n\nimport org.apache.mahout.sparkbindings._\n\nsdc: org.apache.mahout.sparkbindings.SparkDistributedContext = org.apache.mahout.sparkbindings.SparkDistributedContext@2561d2b5\n\ndrmData: org.apache.mahout.math.drm.CheckpointedDrm[Int] = org.apache.mahout.sparkbindings.drm.CheckpointedDrmSpark@6a9e0add\n\n\n\n\n\n\n\n\n\n\n\n\nres1: org.apache.mahout.math.Matrix = \n{\n 0 =>\t{0:2.0,1:2.0,2:10.5,3:10.0}\n 1 =>\t{0:1.0,1:2.0,2:12.0,3:12.0}\n 2 =>\t{0:1.0,1:1.0,2:12.0,3:13.0}\n 3 =>\t{0:2.0,1:1.0,2:11.0,3:13.0}\n 4 =>\t{0:1.0,1:2.0,2:12.0,3:11.0}\n 5 =>\t{0:2.0,1:1.0,2:16.0,3:8.0}\n 6 =>\t{0:6.0,1:2.0,2:17.0,3:1.0}\n 7 =>\t{0:3.0,1:2.0,2:13.0,3:7.0}\n 8 =>\t{0:3.0,1:3.0,2:13.0,3:4.0}\n}\n\ndrmX: org.apache.mahout.math.drm.DrmLike[Int] = OpMapBlock(org.apache.mahout.sparkbindings.drm.CheckpointedDrmSpark@6a9e0add,<function1>,4,-1,true)\n\ny: org.apache.mahout.math.Vector = {0:29.509541,1:18.042851,2:22.736446,3:32.207582,4:21.871292,5:36.187559,6:50.764999,7:40.400208,8:45.811716}\n\ndrmXtX: org.apache.mahout.math.drm.DrmLike[Int] = OpABAnyKey(OpAt(OpMapBlock(org.apache.mahout.sparkbindings.drm.CheckpointedDrmSpark@6a9e0add,<function1>,4,-1,true)),OpMapBlock(org.apache.mahout.sparkbindings.drm.CheckpointedDrmSpark@6a9e0add,<function1>,4,-1,true))\n\ndrmXty: org.apache.mahout.math.drm.DrmLike[Int] = OpAx(OpAt(OpMapBlock(org.apache.mahout.sparkbindings.drm.CheckpointedDrmSpark@6a9e0add,<function1>,4,-1,true)),{0:29.509541,1:18.042851,2:22.736446,3:32.207582,4:21.871292,5:36.187559,6:50.764999,7:40.400208,8:45.811716})\n\n\n\n\n\n\n\nXtX: org.apache.mahout.math.Matrix = \n{\n 0 =>\t{0:69.0,1:40.0,2:291.0,3:137.0}\n 1 =>\t{0:40.0,1:32.0,2:207.0,3:128.0}\n 2 =>\t{0:291.0,1:207.0,2:1546.25,3:968.0}\n 3 =>\t{0:137.0,1:128.0,2:968.0,3:833.0}\n}\n\nXty: org.apache.mahout.math.Vector = {0:821.6857190000001,1:549.744517,2:3978.7015895,3:2272.779989}\n\nbeta: org.apache.mahout.math.Vector = {0:5.2473494653784,1:2.750794578467531,2:1.1527813010791705,3:0.10312017617607927}\n"},"dateCreated":"2016-09-07T10:37:39+0000","dateStarted":"2016-09-11T23:49:20+0000","dateFinished":"2016-09-11T23:50:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3297"},{"title":"Leveraging R and Python for Visualizations","text":"%md\n## And we get the same results.  A very frusterating thing is when you move an algorithm between environments and your results change.\n\n### And now for some hand waiving.\nYou see, I forgot to install R on this cluster- and it is 2am and I'm still polishing \"slides\".  The following works, I swear it- see [this blog post](https://trevorgrant.org/2016/05/19/visualizing-apache-mahout-in-r-via-apache-zeppelin-incubating/) for more details.\n\n## Zeppelin ResourcePools\n\n- ### Zeppelin's `ResourcePools` allow us to pass variable BETWEEN interpreters, we'll talk about them more next. \n- ### Mahout's `drm` or distributed row matrix, has a method `.drmSampleToTSV[K](drmX: DrmLike[K], samplePercent: Double = 1)` which converts a matrix to a tab seperated string. \n- ### The string is then passed to R or Python paragraph, where it is read like a normal tsv file.  \n- ### We can then use R packages like `ggplot2` or Python libraries like `matplotlib` to visalize the results. \n\n``` scala\n%flinkMahout\n// ^^ a mahout enabled Flink interpreter\n\nmyDrm = ...\n// this will sample 30% of the DRM- BIG data implies its to big to visualize the whole thing of fit it in memory\nval tsvString = drm.drmSamleToTSV( myDrm, .3 ) \n\n// Open connection to resourcePool\nimport org.apache.zeppelin.interpreter.InterpreterContext\nval resourcePool = InterpreterContext.get().getResourcePool()\n\n// put the tsvString into the resource pool\nresourcePool.put(\"my_data\", tsvString)\n```\n\nThen \n\n```r\n%r\n\ndfStr <- z.get(\"my_data\")\ndataFrame <- read.table( tesxt= dfStr, sep= \"\\t\", header=FALSE)\n```\n\nAnd finally to plot\n```r\n%r {\"imageWidth\": 700px }\nlibrary(ggplot2)\nplot(dataFrame)\n```\n\n## The whole thing ends up looking kind of like this (but this was from Mahout in spark, which has API access to the resource pool\n<center>![Handoff](https://trevorgrantdotorg.files.wordpress.com/2016/05/handoff-to-r.png?w=1000)</center>","dateUpdated":"2016-09-12T00:14:49+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{},"map":{"baseMapType":"Streets","isOnline":true,"pinCols":[]}},"enabled":true,"editorMode":"ace/mode/markdown","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1473637973638_273464287","id":"20160911-235253_-398721286","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>And we get the same results.  A very frusterating thing is when you move an algorithm between environments and your results change.</h2>\n<h3>And now for some hand waiving.</h3>\n<p>You see, I forgot to install R on this cluster- and it is 2am and I'm still polishing &ldquo;slides&rdquo;.  The following works, I swear it- see <a href=\"https://trevorgrant.org/2016/05/19/visualizing-apache-mahout-in-r-via-apache-zeppelin-incubating/\">this blog post</a> for more details.</p>\n<h2>Zeppelin ResourcePools</h2>\n<ul>\n<li><h3>Zeppelin's <code>ResourcePools</code> allow us to pass variable BETWEEN interpreters, we'll talk about them more next.</h3>\n</li>\n<li><h3>Mahout's <code>drm</code> or distributed row matrix, has a method <code>.drmSampleToTSV[K](drmX: DrmLike[K], samplePercent: Double = 1)</code> which converts a matrix to a tab seperated string.</h3>\n</li>\n<li><h3>The string is then passed to R or Python paragraph, where it is read like a normal tsv file.</h3>\n</li>\n<li><h3>We can then use R packages like <code>ggplot2</code> or Python libraries like <code>matplotlib</code> to visalize the results.</h3>\n</li>\n</ul>\n<pre><code class=\"scala\">%flinkMahout\n// ^^ a mahout enabled Flink interpreter\n\nmyDrm = ...\n// this will sample 30% of the DRM- BIG data implies its to big to visualize the whole thing of fit it in memory\nval tsvString = drm.drmSamleToTSV( myDrm, .3 ) \n\n// Open connection to resourcePool\nimport org.apache.zeppelin.interpreter.InterpreterContext\nval resourcePool = InterpreterContext.get().getResourcePool()\n\n// put the tsvString into the resource pool\nresourcePool.put(\"my_data\", tsvString)\n</code></pre>\n<p>Then</p>\n<pre><code class=\"r\">%r\n\ndfStr &lt;- z.get(\"my_data\")\ndataFrame &lt;- read.table( tesxt= dfStr, sep= \"\\t\", header=FALSE)\n</code></pre>\n<p>And finally to plot</p>\n<pre><code class=\"r\">%r {\"imageWidth\": 700px }\nlibrary(ggplot2)\nplot(dataFrame)\n</code></pre>\n<h2>The whole thing ends up looking kind of like this (but this was from Mahout in spark, which has API access to the resource pool</h2>\n<p><center><img src=\"https://trevorgrantdotorg.files.wordpress.com/2016/05/handoff-to-r.png?w=1000\" alt=\"Handoff\" /></center></p>\n"},"dateCreated":"2016-09-11T23:52:53+0000","dateStarted":"2016-09-12T00:14:46+0000","dateFinished":"2016-09-12T00:14:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3298"},{"title":"Wrap Up","text":"%md \n\n## In this Section, we have shown the value Apache Zeppelin, in concert with Flink (and Mahout if you want) brings to a data scientist.\n\n### Data Scientists with Apaches Zeppelin, Flink/FlinkML, and Mahout\n- ### Do work on Big Data with the interactive shell they crave\n- ### Leverage R and Python's rich plotting functionality\n- ### Execute advanged mathematical analyses\n\n<p>\n<p>\n<p>\n<p>\n<p>\n<p>\n<p>\n<p>\n<p>\n<p>\n<p>\n<p>","dateUpdated":"2016-09-12T08:59:44+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{},"map":{"baseMapType":"Streets","isOnline":true,"pinCols":[]}},"enabled":true,"editorMode":"ace/mode/markdown","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1473305798564_-1888301465","id":"20160908-033638_-209822849","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>In this Section, we have shown the value Apache Zeppelin, in concert with Flink (and Mahout if you want) brings to a data scientist.</h2>\n<h3>Data Scientists with Apaches Zeppelin, Flink/FlinkML, and Mahout</h3>\n<ul>\n<li><h3>Do work on Big Data with the interactive shell they crave</h3>\n</li>\n<li><h3>Leverage R and Python's rich plotting functionality</h3>\n</li>\n<li><h3>Execute advanged mathematical analyses</h3>\n</li>\n</ul>\n<p><p>\n<br  /><p>\n<br  /><p>\n<br  /><p>\n<br  /><p>\n<br  /><p>\n<br  /><p>\n<br  /><p>\n<br  /><p>\n<br  /><p>\n<br  /><p>\n<br  /><p></p>\n"},"dateCreated":"2016-09-08T03:36:38+0000","dateStarted":"2016-09-12T08:59:44+0000","dateFinished":"2016-09-12T08:59:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3299"},{"text":"%md ","dateUpdated":"2016-09-11T23:59:02+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{},"map":{"baseMapType":"Streets","isOnline":true,"pinCols":[]}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1473638342064_2106324325","id":"20160911-235902_-1340194124","dateCreated":"2016-09-11T23:59:02+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:3300"}],"name":"ff2016/Act 2/Scene 3- Flink+Mahout","id":"2BVHSX5SP","lastReplName":{"value":"md"},"angularObjects":{"2BWY9CUHN:shared_process":[],"2BUKW2KRV:shared_process":[],"2BY5R5REM:shared_process":[],"flinkML:shared_process":[],"2BUV7W98K:shared_process":[],"2BVJRXCGT:shared_process":[],"2BVFA2FYA:shared_process":[],"2BXTBP82W:shared_process":[],"2BY2KCXPQ:shared_process":[],"2BY77ZK1N:shared_process":[],"2BWK7ZR27:shared_process":[],"flinkStreamingDemo:shared_process":[],"2BVY13VRU:shared_process":[],"2BUZ8MDZ6:shared_process":[],"2BVEM1GV9:shared_process":[],"mahoutSpark:shared_process":[],"mahoutFlink:shared_process":[],"flinkNoJars:shared_process":[],"2BW2XCGHG:shared_process":[],"2BUQPREFW:shared_process":[],"flinkMlCustom:shared_process":[],"2BXNYEA66:shared_process":[],"2BX9CQ57T:shared_process":[],"2BUG7RJA5:shared_process":[],"flinkGelly:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}